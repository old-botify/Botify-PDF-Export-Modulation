This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-04T21:52:43.739Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
extract.py
png-to-pdf.py

================================================================
Repository Files
================================================================

================
File: extract.py
================
from pdf2image import convert_from_path
import os

def convert_pdf_to_png(pdf_path, output_dir='.'):
    """
    Convert a PDF file to a series of numbered PNG images.
    
    Args:
        pdf_path (str): Path to the PDF file
        output_dir (str): Directory to save the PNG files (default: current directory '.')
    """
    # Validate PDF path
    if not pdf_path or not os.path.exists(pdf_path):
        raise ValueError(f"PDF file not found: '{pdf_path}'")
    
    if not pdf_path.lower().endswith('.pdf'):
        raise ValueError("File must be a PDF")
    
    # Create output directory if it doesn't exist and it's not the current directory
    if output_dir != '.' and not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    try:
        # Convert PDF to images
        pages = convert_from_path(pdf_path)
        
        # Save each page as PNG with numbered filename
        for i, page in enumerate(pages, start=1):
            output_file = os.path.join(output_dir, f'page_{i:03d}.png')
            page.save(output_file, 'PNG')
            print(f'Saved page {i} as {output_file}')
            
        print(f'\nSuccessfully converted {len(pages)} pages to PNG format.')
        
    except Exception as e:
        print(f'Error converting PDF: {str(e)}')
        raise

if __name__ == '__main__':
    while True:
        # Get PDF path with validation
        pdf_file = input('Enter the path to your PDF file (e.g., document.pdf): ').strip()
        if not pdf_file:
            print("Error: PDF path cannot be empty. Please try again.")
            continue
            
        if not os.path.exists(pdf_file):
            print(f"Error: File '{pdf_file}' not found. Please enter a valid path.")
            continue
            
        if not pdf_file.lower().endswith('.pdf'):
            print("Error: File must be a PDF. Please enter a valid PDF file.")
            continue
            
        break
    
    # Get output directory
    output_folder = input('Enter output directory (press Enter for current directory): ').strip() or '.'
    
    try:
        convert_pdf_to_png(pdf_file, output_folder)
    except Exception as e:
        print(f"\nFailed to convert PDF: {str(e)}")
        print("\nPlease make sure:")
        print("1. The PDF file is not corrupted")
        print("2. You have read permissions for the PDF file")
        print("3. You have write permissions in the output directory")

================
File: png-to-pdf.py
================
from PIL import Image
import os
import re

def convert_pngs_to_pdf(input_dir='.', output_file='combined.pdf', pattern=r'page_\d+\.png'):
    """
    Convert a series of numbered PNG files into a single PDF.
    
    Args:
        input_dir (str): Directory containing the PNG files (default: current directory)
        output_file (str): Name of the output PDF file (default: 'combined.pdf')
        pattern (str): Regex pattern to match PNG files (default: 'page_XXX.png' format)
    """
    try:
        # Get all PNG files that match the pattern
        png_files = [f for f in os.listdir(input_dir) if f.endswith('.png') and re.match(pattern, f)]
        
        if not png_files:
            print(f"No PNG files matching the pattern '{pattern}' found in directory.")
            return
        
        # Sort files numerically (page_001.png, page_002.png, etc.)
        png_files.sort(key=lambda x: int(re.search(r'\d+', x).group()))
        
        print(f"Found {len(png_files)} PNG files.")
        
        # Open first image and convert RGB mode if needed
        first_image = Image.open(os.path.join(input_dir, png_files[0]))
        if first_image.mode != 'RGB':
            first_image = first_image.convert('RGB')
        
        # Get all other images
        other_images = []
        for png_file in png_files[1:]:
            img = Image.open(os.path.join(input_dir, png_file))
            if img.mode != 'RGB':
                img = img.convert('RGB')
            other_images.append(img)
        
        # Save as PDF
        output_path = os.path.join(input_dir, output_file)
        first_image.save(
            output_path,
            save_all=True,
            append_images=other_images,
            resolution=100.0
        )
        
        print(f"Successfully created PDF: {output_path}")
        print(f"Total pages: {len(png_files)}")
        
    except Exception as e:
        print(f"Error creating PDF: {str(e)}")

if __name__ == '__main__':
    # Get input directory
    input_dir = input('Enter input directory (press Enter for current directory): ').strip() or '.'
    
    # Get output filename
    output_file = input('Enter output PDF filename (press Enter for "combined.pdf"): ').strip() or 'combined.pdf'
    
    # Add .pdf extension if not provided
    if not output_file.lower().endswith('.pdf'):
        output_file += '.pdf'
    
    convert_pngs_to_pdf(input_dir, output_file)
